name: Docker build on push
env:
        DOCKER_CLI_EXPERIMENTAL: enabled

on:
    push:
        branches:
            - master

jobs:
        build:
                runs-on: ubuntu-18.04
                name: Build and push all the stuff defined in this repo
                steps:
                        - name: Checkout repo
                          uses: actions/checkout@v2

                        - name: Set env variables
                          run: |
                                  echo "echo \"BRANCH=$(echo ${GITHUB_REF#refs/heads/} | sed 's/\//-/g')\" >> $GITHUB_ENV"
                                  echo "echo \"SHORTSHA=$(git rev-parse --short HEAD)\" >> $GITHUB_ENV"
                                  echo "echo \"DOCKER_HUB_REPO=joinmarket\" >> $GITHUB_ENV"

                        - name: Show set env variables
                          run: |
                                  printf "    BRANCH: %s\n"  "$githubGITHUB_BRANCH"
                                  printf "    SHORTSHA: %s\n"  "$githubSHORTSHA"
                                  printf "    REPO: %s\n" "$GITHUB_REPOSITORY"
                                  printf "    COMMIT ID: %s\n" "$GITHUB_SHA"
                                  printf "    DOCKER HUB REPO: %s\n" "$github.DOCKER_HUB_REPO"
                                  printf "    GITHUB_ACTOR: %s\n" "$GITHUB_ACTOR"
                                  printf "    GITHUB_REPOSITORY: %s\n" "$GITHUB_REPOSITORY"

                        - name: Login to Docker Hub with specified username
                          run: |
                                  if [[ ! -z ${{ secrets.DOCKER_PASSWORD }} ]] && [[ ! -z ${{ secrets.DOCKER_USERNAME }} ]]; then 
                                    echo "${{ secrets.DOCKER_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_USERNAME }}" --password-stdin
                                  else
                                    echo "DOCKER_USERNAME and DOCKER_PASSOWRD must be set!"
                                    exit 1
                                  fi

                        - name: Setup Docker buildx action
                          uses: crazy-max/ghaction-docker-buildx@v1
                          id: buildx
                          with:
                                  buildx-version: latest
                                  qemu-version: latest

                        - name: Show available Docker buildx platforms
                          run: echo ${{ steps.buildx.outputs.platforms }}

                        - name: Cache Docker layers
                          uses: actions/cache@v2
                          id: cache
                          with:
                              path: /tmp/.buildx-cache
                              key: ${{ runner.os }}-buildx-${{ github.sha }}
                              restore-keys: |
                                  ${{ runner.os }}-buildx-

                        - name: Build against master
                          run: |
                                  docker buildx build \
                                  --cache-from "type=local,src=/tmp/.buildx-cache" \
                                  --cache-to "type=local,dest=/tmp/.buildx-cache" \
                                  --platform linux/amd64,linux/arm64,linux/arm/v7 \
                                  --tag ${{ secrets.DOCKER_HUB_USER }}/$DOCKER_HUB_REPO:master-$SHORTSHA \
                                  --output "type=registry" .

                        - name: Build against latest tag
                          run: |
                                  docker buildx build \
                                  --cache-from "type=local,src=/tmp/.buildx-cache" \
                                  --cache-to "type=local,dest=/tmp/.buildx-cache" \
                                  --platform linux/amd64,linux/arm64,linux/arm/v7 \
                                  --tag ${{ secrets.DOCKER_HUB_USER }}/$DOCKER_HUB_REPO:latest \
                                  --output "type=registry" .

                        - name: Login and push (master to GHCR with MAINTAINER_USER and MAINTAINER_TOKEN if exists
                          run: |
                                  if [[ ! -z $secrets.MAINTAINER_TOKEN ]] && [[ ! -z $secrets.MAINTAINER_USER ]]; then  
                                        echo "$secrets.MAINTAINER_TOKEN" | docker login https://ghcr.io -u "$secrets.MAINTAINER_USER" --password-stdin
                                        docker buildx build \
                                                --cache-from "type=local,src=/tmp/.buildx-cache" \
                                                --cache-to "type=local,dest=/tmp/.buildx-cache" \
                                                --platform linux/amd64,linux/arm64,linux/arm/v7 \
                                                --tag ghcr.io/${{ secrets.DOCKER_HUB_USER }}/$DOCKER_HUB_REPO:master-$SHORTSHA \
                                                --output "type=registry" .
                                        docker buildx build \
                                                --cache-from "type=local,src=/tmp/.buildx-cache" \
                                                --cache-to "type=local,dest=/tmp/.buildx-cache" \
                                                --platform linux/amd64,linux/arm64,linux/arm/v7 \
                                                --tag ghcr.io/${{ secrets.DOCKER_HUB_USER }}/$DOCKER_HUB_REPO:latest \
                                                --output "type=registry" .                                                 
                                  else
                                        echo "MAINTAINER_TOKEN and MAINTAINER_USER do no exist! Skipping!"
                                  fi
  

